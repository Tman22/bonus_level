exit
user1.articles
User.all
user2
user1
exit
@article.tags
@article.tags.find_or_create_by(title: params[:article][:tags])
@article.tags
@article.tags.create(title: params[:article][:tags])
Tag.all
@article.tags.create(title: params[:article][:tags])
@article.tags.find_or_create_by(title: params[:article][:tags])
@article.save
exit
@article.tags
@article.tags.find_or_create_by(title: params[:article][:tags])
@article.tags
@article.tags.find_or_create_by(title: params[:article][:tags])
@article.tags
@article.tags.create(title: params[:article][:tags])
Articletags.new
Articletags.all
Article_tags.all
@article.tags
Tag.all
@article.tags.create(title: params[:article][:tags])
@article.save
@article.tags.create(title: params[:article][:tags])
@article.tags.create(title: params[:article][:tags].title)
params[:article][:tags]
params[:tags]
@article.tags.create(title: params[:tags].title)
params
@article.tags
@article.tag
@tags
@article
exit
params
exit
@article.tags
@article
@articles
exit
@article
user
exit
params
exit
article_params
params
c
exit
user
c
user
c
user
c
expect(page).to have_content user.name
expect(page).to have_content "Logged in"
current_path.should == user_path(user)
current_path
click_on "Login"
fill_in "Password", with: user.password
fill_in "Name", with: user.name
user
user.name
sessions
session
user.name
exit
c
current_user
c
current_user
c
current_user
c
current_user
exit
current_user
expect(page).to have_content user.name
expect(page).to have_content "Logged in"
user_path(user)
current_path
current_user
user.name
exit
user_path(@user)
admin_user_path(@user)
current_admin?
exit
current_user
@current_user
exit
@current_user
current_user
exit
sessions
session
exit
session[:taylor] = "boss"
session
params 
exit
params
session[:user_id]
sessions
session
c
Session
session
sessions
exit
sessions[:id] = 2
session[:id] = 2
params
sessions
session
exit
User.all
Users
@user = User.create(user_params)
user_params
params
@user
exit
session
sessions
params
exit
params[:id]
params
